import { useState, useCallback } from "react";
import ModalContainer from "../ModalContainer";
import BotonConIcono from "@/components/buttons/BotonConIcono";
import LapizFirmando from "@/components/icons/LapizFirmando";
import {
  ModoRegistro,
  modoRegistroTextos,
} from "@/interfaces/shared/ModoRegistroPersonal";
import { estaDentroDelColegioIE20935 } from "@/lib/helpers/functions/geolocation/getEstadoDeUbicacion";
import { PuntoGeografico } from "@/interfaces/Geolocalizacion";
import { verificarDisponibilidadGPS } from "@/lib/helpers/functions/geolocation/verificarDisponibilidadGPS";
import { detectarTipoDispositivo } from "@/lib/helpers/functions/geolocation/detectarTipoDispositivo";
import Loader from "@/components/shared/loaders/Loader";
import { ENTORNO } from "@/constants/ENTORNO";
import { Entorno } from "@/interfaces/shared/Entornos";

// ========================================================================================
// CONSTANTES DE CONFIGURACI√ìN
// ========================================================================================
export const SOLO_PERMITIR_CELULARES_PARA_ASISTENCIA =
  ENTORNO !== Entorno.LOCAL || false; // Cambiar a false para permitir laptops

// üÜï FUNCIONES DE DESARROLLO - SOLO ACTIVAS EN ENTORNO LOCAL
export const REQUERIR_VALIDACION_GPS = true; // üîß Cambiar a false para saltarse GPS (SOLO en local)
export const USAR_COORDENADAS_MOCKEADAS = false; // üé≠ Cambiar a true para usar coordenadas fake (SOLO en local)

// üéØ COORDENADAS PARA TESTING (SOLO en local)
export const LATITUD_MOCKEADA = -13.056668; // Coordenada de prueba
export const LONGITUD_MOCKEADA = -76.346977; // Coordenada de prueba

/*
üé≠ INSTRUCCIONES PARA FUNCIONES DE DESARROLLO:

‚ö†Ô∏è IMPORTANTE: Estas funciones SOLO trabajan en ENTORNO LOCAL
   En producci√≥n, siempre se usa GPS real con validaci√≥n completa.

1. BYPASS DE GPS (Solo en Local):
   - REQUERIR_VALIDACION_GPS = false
   - Se salta TODA la validaci√≥n de ubicaci√≥n
   - √ötil para desarrollo sin GPS

2. MOCKEO DE COORDENADAS (Solo en Local):
   - USAR_COORDENADAS_MOCKEADAS = true
   - REQUERIR_VALIDACION_GPS = true (para probar flujo completo)
   - Simula GPS real pero con coordenadas predefinidas

üìç COORDENADAS √öTILES PARA TESTING:

DENTRO DEL COLEGIO IE 20935:
- LATITUD_MOCKEADA = -13.0393
- LONGITUD_MOCKEADA = -76.3806

FUERA DEL COLEGIO:
- LATITUD_MOCKEADA = -12.0464
- LONGITUD_MOCKEADA = -77.0428

üîß MODOS DISPONIBLES (Solo en Local):

MODO 1 - BYPASS COMPLETO:
- REQUERIR_VALIDACION_GPS = false
‚Üí Sin GPS, sin validaci√≥n

MODO 2 - TESTING CON GPS FAKE:
- REQUERIR_VALIDACION_GPS = true
- USAR_COORDENADAS_MOCKEADAS = true
‚Üí GPS fake + validaci√≥n completa

MODO 3 - PRODUCCI√ìN (Autom√°tico en otros entornos):
‚Üí GPS real + validaci√≥n completa
*/

interface MarcarAsistenciaPropiaDePersonalModalProps {
  eliminateModal: () => void;
  modoRegistro: ModoRegistro;
  marcarMiAsistenciaDeHoy: () => Promise<void>;
  setMostrarModalConfirmacioAsistenciaMarcada: React.Dispatch<
    React.SetStateAction<boolean>
  >;
  setMostrarModalFaltaActivarGPSoBrindarPermisosGPS: React.Dispatch<
    React.SetStateAction<boolean>
  >;
  setMostrarModalUbicacionFueraDelColegioAlRegistrarAsistenciaPropia: React.Dispatch<
    React.SetStateAction<boolean>
  >;
  setMostrarModalErrorGenericoAlRegistrarAsistenciaPropia: React.Dispatch<
    React.SetStateAction<boolean>
  >;
  setMostrarModalFalloConexionAInternet: React.Dispatch<
    React.SetStateAction<boolean>
  >;
  setMostrarModalNoSePuedeUsarLaptop: React.Dispatch<
    React.SetStateAction<boolean>
  >;
  setMostrarModalDispositivoSinGPS: React.Dispatch<
    React.SetStateAction<boolean>
  >;
}

const MarcarAsistenciaPropiaDePersonalModal = ({
  eliminateModal,
  modoRegistro,
  marcarMiAsistenciaDeHoy,
  setMostrarModalConfirmacioAsistenciaMarcada,
  setMostrarModalFaltaActivarGPSoBrindarPermisosGPS,
  setMostrarModalUbicacionFueraDelColegioAlRegistrarAsistenciaPropia,
  setMostrarModalErrorGenericoAlRegistrarAsistenciaPropia,
  setMostrarModalFalloConexionAInternet,
  setMostrarModalNoSePuedeUsarLaptop,
  setMostrarModalDispositivoSinGPS,
}: MarcarAsistenciaPropiaDePersonalModalProps) => {
  const [estaProcessando, setEstaProcessando] = useState(false);

  // üéØ DETERMINAR CONFIGURACI√ìN FINAL (Solo funciones dev en local)
  const esEntornoLocal = ENTORNO === Entorno.LOCAL;
  const saltarValidacionGPS = esEntornoLocal && !REQUERIR_VALIDACION_GPS;
  const usarCoordenadasFake = esEntornoLocal && USAR_COORDENADAS_MOCKEADAS;

  const verificarYSolicitarPermisos = async (): Promise<boolean> => {
    try {
      // Verificar si ya tenemos permisos
      if ("permissions" in navigator) {
        const permission = await navigator.permissions.query({
          name: "geolocation",
        });

        console.log("üìç Estado actual de permisos:", permission.state);

        if (permission.state === "granted") {
          console.log("‚úÖ Permisos ya concedidos");
          return true;
        }

        if (permission.state === "denied") {
          console.log("‚ùå Permisos denegados permanentemente");
          return false;
        }

        console.log("üîÑ Permisos en estado prompt, solicitando...");
      }

      // Solicitar permisos
      return new Promise((resolve) => {
        navigator.geolocation.getCurrentPosition(
          () => {
            console.log("‚úÖ Permisos concedidos");
            resolve(true);
          },
          (error) => {
            console.log("‚ùå Permisos denegados:", error);
            resolve(false);
          },
          {
            enableHighAccuracy: false,
            timeout: 5000,
            maximumAge: Infinity,
          }
        );
      });
    } catch (error) {
      console.error("‚ùå Error al verificar permisos:", error);
      return false;
    }
  };

  const obtenerUbicacion = (): Promise<PuntoGeografico> => {
    return new Promise((resolve, reject) => {
      // üé≠ USAR COORDENADAS MOCKEADAS (Solo en local)
      if (usarCoordenadasFake) {
        console.log(
          "üé≠ MODO MOCKEO ACTIVADO - Usando coordenadas fake (Solo en local)"
        );
        console.log("üìç Coordenadas mockeadas:", {
          latitud: LATITUD_MOCKEADA,
          longitud: LONGITUD_MOCKEADA,
          entorno: "LOCAL - TESTING",
        });

        // Simular delay del GPS real
        setTimeout(() => {
          resolve({
            latitud: LATITUD_MOCKEADA,
            longitud: LONGITUD_MOCKEADA,
          });
        }, 1000);

        return;
      }

      // üîÑ MODO NORMAL - GPS REAL
      if (!navigator.geolocation) {
        reject(new Error("Geolocalizaci√≥n no soportada"));
        return;
      }

      const options = {
        enableHighAccuracy: true,
        timeout: 15000,
        maximumAge: 30000,
      };

      navigator.geolocation.getCurrentPosition(
        (position) => {
          console.log("üìç Posici√≥n REAL obtenida:", {
            latitud: position.coords.latitude,
            longitud: position.coords.longitude,
            precision: position.coords.accuracy,
          });

          resolve({
            latitud: position.coords.latitude,
            longitud: position.coords.longitude,
          });
        },
        (error) => {
          console.error("‚ùå Error de geolocalizaci√≥n:", {
            code: error.code,
            message: error.message,
          });

          let errorMessage = "Error desconocido";
          switch (error.code) {
            case error.PERMISSION_DENIED:
              errorMessage = "Permisos de ubicaci√≥n denegados";
              break;
            case error.POSITION_UNAVAILABLE:
              errorMessage = "Ubicaci√≥n no disponible";
              break;
            case error.TIMEOUT:
              errorMessage = "Timeout al obtener ubicaci√≥n";
              break;
          }

          reject(new Error(errorMessage));
        },
        options
      );
    });
  };

  const manejarRegistroAsistencia = useCallback(async () => {
    if (estaProcessando) return;

    try {
      setEstaProcessando(true);

      // MOSTRAR CONFIGURACI√ìN ACTUAL EN CONSOLA
      console.log("üîß CONFIGURACI√ìN ACTUAL:", {
        entorno: ENTORNO,
        esEntornoLocal,
        saltarValidacionGPS,
        usarCoordenadasFake,
        configuracionOriginal: {
          REQUERIR_VALIDACION_GPS,
          USAR_COORDENADAS_MOCKEADAS,
        },
      });

      // PASO 1: Verificar tipo de dispositivo
      if (SOLO_PERMITIR_CELULARES_PARA_ASISTENCIA) {
        const tipoDispositivo = detectarTipoDispositivo();

        if (tipoDispositivo === "laptop") {
          console.log("‚ùå Dispositivo no permitido: laptop");
          eliminateModal();
          setMostrarModalNoSePuedeUsarLaptop(true);
          return;
        }

        console.log("‚úÖ Dispositivo permitido: m√≥vil");
      }

      // üöÄ BYPASS COMPLETO DE GPS (Solo en local)
      if (saltarValidacionGPS) {
        console.log("‚ö° BYPASS DE GPS ACTIVADO (Solo en entorno local)");
        console.log("üöÄ Saltando TODA la validaci√≥n de ubicaci√≥n...");

        // Ir directamente a marcar asistencia
        await marcarMiAsistenciaDeHoy();

        console.log("‚úÖ Asistencia registrada exitosamente (sin GPS)");
        eliminateModal();
        setMostrarModalConfirmacioAsistenciaMarcada(true);
        return;
      }

      // üîç VALIDACI√ìN GPS COMPLETA (Producci√≥n o local con GPS habilitado)
      console.log(
        "üîç Validaci√≥n GPS habilitada, procediendo con verificaciones..."
      );

      // PASO 2: Verificar disponibilidad de GPS (Solo si no usamos coordenadas fake)
      if (!usarCoordenadasFake) {
        if (!verificarDisponibilidadGPS()) {
          console.log("‚ùå GPS no disponible en el dispositivo");
          eliminateModal();
          setMostrarModalDispositivoSinGPS(true);
          return;
        }

        console.log("‚úÖ GPS disponible, verificando permisos...");

        // PASO 3: Verificar y solicitar permisos de geolocalizaci√≥n
        const tienePermisos = await verificarYSolicitarPermisos();

        if (!tienePermisos) {
          console.log("‚ùå No se pudieron obtener permisos de geolocalizaci√≥n");
          eliminateModal();
          setMostrarModalFaltaActivarGPSoBrindarPermisosGPS(true);
          return;
        }

        console.log("‚úÖ Permisos GPS obtenidos");
      }

      // PASO 4: Obtener ubicaci√≥n
      let ubicacion: PuntoGeografico;
      try {
        ubicacion = await obtenerUbicacion();

        if (usarCoordenadasFake) {
          console.log(
            "üé≠ Ubicaci√≥n MOCKEADA obtenida (Solo en local):",
            ubicacion
          );
        } else {
          console.log("‚úÖ Ubicaci√≥n REAL obtenida:", ubicacion);
        }
      } catch (error) {
        console.error("‚ùå Error al obtener ubicaci√≥n:", error);
        eliminateModal();
        setMostrarModalFaltaActivarGPSoBrindarPermisosGPS(true);
        return;
      }

      // PASO 5: Verificar si est√° dentro del colegio
      const estaDentroDelColegio = estaDentroDelColegioIE20935(ubicacion);

      if (!estaDentroDelColegio) {
        if (usarCoordenadasFake) {
          console.log(
            "‚ùå Coordenadas MOCKEADAS est√°n fuera del √°rea del colegio"
          );
          console.log(
            "üí° TIP: Cambia LATITUD_MOCKEADA y LONGITUD_MOCKEADA para testing"
          );
        } else {
          console.log("‚ùå Usuario fuera del √°rea del colegio");
        }
        eliminateModal();
        setMostrarModalUbicacionFueraDelColegioAlRegistrarAsistenciaPropia(
          true
        );
        return;
      }

      if (usarCoordenadasFake) {
        console.log(
          "‚úÖ Coordenadas MOCKEADAS est√°n dentro del √°rea, marcando asistencia..."
        );
      } else {
        console.log(
          "‚úÖ Usuario dentro del √°rea del colegio, marcando asistencia..."
        );
      }

      // PASO FINAL: Marcar asistencia
      await marcarMiAsistenciaDeHoy();

      console.log("‚úÖ Asistencia registrada exitosamente");
      eliminateModal();
      setMostrarModalConfirmacioAsistenciaMarcada(true);
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    } catch (error: any) {
      console.error("‚ùå Error al marcar asistencia:", error);

      // Verificar si es error de conexi√≥n
      if (
        error?.message?.includes("network") ||
        error?.message?.includes("conexi√≥n") ||
        error?.message?.includes("internet") ||
        error?.name === "NetworkError" ||
        error?.message?.includes("fetch")
      ) {
        eliminateModal();
        setMostrarModalFalloConexionAInternet(true);
      } else {
        eliminateModal();
        setMostrarModalErrorGenericoAlRegistrarAsistenciaPropia(true);
      }
    } finally {
      setEstaProcessando(false);
    }
  }, [
    estaProcessando,
    esEntornoLocal,
    saltarValidacionGPS,
    usarCoordenadasFake,
    eliminateModal,
    marcarMiAsistenciaDeHoy,
    setMostrarModalConfirmacioAsistenciaMarcada,
    setMostrarModalFaltaActivarGPSoBrindarPermisosGPS,
    setMostrarModalUbicacionFueraDelColegioAlRegistrarAsistenciaPropia,
    setMostrarModalErrorGenericoAlRegistrarAsistenciaPropia,
    setMostrarModalFalloConexionAInternet,
    setMostrarModalNoSePuedeUsarLaptop,
    setMostrarModalDispositivoSinGPS,
  ]);

  // üé® DETERMINAR TEXTO Y ESTILO SEG√öN CONFIGURACI√ìN
  const obtenerTextoModal = () => {
    if (estaProcessando) {
      if (saltarValidacionGPS) {
        return {
          texto: (
            <>
              <b>Registrando</b> tu asistencia...
              <br />
              <br />
              <span className="text-orange-600">
                <b>üöÄ Modo sin GPS</b> (Solo en local)
              </span>
            </>
          ),
          boton: "Registrando...",
        };
      } else if (usarCoordenadasFake) {
        return {
          texto: (
            <>
              <b>Usando coordenadas</b> de <br />
              <b>prueba</b> para registro...
              <br />
              <br />
              <span className="text-purple-600">
                <b>üé≠ Modo MOCKEO</b> (Solo en local)
              </span>
            </>
          ),
          boton: "Usando GPS fake...",
        };
      } else {
        return {
          texto: (
            <>
              <b>Verificando permisos</b> y <br />
              obteniendo tu <b>ubicaci√≥n</b>...
              <br />
              <br />
              Si aparece una solicitud de <br />
              permisos, por favor <b>acepta</b> <br />
              para continuar.
            </>
          ),
          boton: "Verificando ubicaci√≥n...",
        };
      }
    } else {
      if (saltarValidacionGPS) {
        return {
          texto: (
            <>
              Vamos a <b>registrar</b> tu <br />
              asistencia directamente.
              <br />
              <br />
              <span className="text-orange-600">
                <b>üöÄ Sin validaci√≥n GPS</b> (Solo en local)
              </span>
            </>
          ),
          boton: "üöÄ Registrar (Sin GPS)",
        };
      } else if (usarCoordenadasFake) {
        return {
          texto: (
            <>
              Vamos a <b>registrar</b> tu <br />
              asistencia usando <br />
              <b>coordenadas de prueba</b>.
              <br />
              <br />
              <span className="text-purple-600">
                <b>üé≠ Modo TESTING</b> (Solo en local)
              </span>
            </>
          ),
          boton: "üé≠ Registrar (Modo Testing)",
        };
      } else {
        return {
          texto: (
            <>
              Vamos a verificar tu <br />
              <b>ubicaci√≥n</b> para{" "}
              <b>
                registrar tu <br />
                asistencia de {modoRegistroTextos[modoRegistro]}
              </b>
              . Aseg√∫rate de <br />
              estar <b>dentro del colegio</b>.
            </>
          ),
          boton: `Registrar ${modoRegistroTextos[modoRegistro]}`,
        };
      }
    }
  };

  const { texto, boton } = obtenerTextoModal();

  return (
    <ModalContainer className="z-[1200]" eliminateModal={eliminateModal}>
      <div className="w-full max-w-md px-4 py-4 sm:px-6 sm:py-8 flex flex-col items-center justify-center gap-5">
        <p className="text-center text-sm xs:text-base sm:text-lg leading-relaxed">
          {texto}
        </p>

        {REQUERIR_VALIDACION_GPS && (
          <img
            className="rounded-[5px] w-[11rem] xs:w-[11rem] sm:w-[11.5rem] md:w-[10.5rem] h-auto object-contain"
            src="/images/gif/UbicacionColegioViajeGuiado.gif"
            alt="Como llegar al colegio"
          />
        )}

        <BotonConIcono
          className={`${
            modoRegistro === ModoRegistro.Entrada
              ? "bg-verde-principal"
              : "bg-rojo-oscuro"
          } text-blanco flex gap-3 px-4 py-2 rounded-md text-sm sm:text-base disabled:opacity-50 disabled:cursor-not-allowed`}
          texto={boton}
          IconTSX={
            estaProcessando ? (
              <Loader className="w-[1.5rem] bg-white p-[0.3rem]" />
            ) : (
              <LapizFirmando className="w-[1.5rem]" />
            )
          }
          onClick={manejarRegistroAsistencia}
          disabled={estaProcessando}
        />
      </div>
    </ModalContainer>
  );
};

export default MarcarAsistenciaPropiaDePersonalModal;
